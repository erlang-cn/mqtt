<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>SESSION</title>
    <link rel="stylesheet" href="https://synrc.space/synrc.css" />
</head>
<body>
<nav>
    <a href='https://n2o.space'>ECO</a>
    <a href='https://o7.network'>O7</a>
    <a href='../index.html'>N2O</a>
</nav>
<header>
    <a href="../index.html"><img src="https://n2o.space/img/Synrc Neo.svg"></a>
    <h1>SESSION</h1>
</header>
<main>
    <section>
        <h3>INTRO</h3>
        <p>The <a href="https://github.com/synrc/mqtt/blob/master/src/services/n2o_session.erl">n2o_session</a>
        module provides session variables protected by authorization token.</p>
        <figure><code>
 > ets:tab2list(cookies).
 [{{<<"05dcf467c79071008bc4">>,user},{63710034516,"maxim"}},
  {{<<"05dcf467c79071008bc4">>,room},{63710034516,"n2o"}},
  {{<<"05dcf467c79071008bc4">>,auth},{63710033891,[]}}]
        </code></figure>
    </section>
    <section>
        <h3>TYPES</h3>
        <p>Session token represents tuple cached in ETS.
           It consists of session id, key, expiration time and value.
           Session token used both for auth and for session variales.</p>
        <figure><code>
 -type expires()     :: integer().
 -type session_sid() :: binary().
 -type session_key() :: { session_sid() , term()        }.
 -type session_val() :: { expires()     , term()        }.
 -type session()     :: { session_key() , session_val() }.
        </code></figure>
        <p>Session token encoded with pickler tagged as <b>'Token'</b> tuple.</p>
        <figure><code>
 -type token() :: { 'Token', binary() }.
        </code></figure>
    </section>
    <section>
        <h3>API</h3>
        <h4>authenticate([],binary()) -> token().</h4>
        <p>The protocol is following. If session is expired or session
           token is invalid then new session token issued. If session token
           is not expired and valid then two cases could happen:
           1) if <b>nitro_prolongate</b> n2o parameter is true,
              then new expiration value is updated for current session, while
              session sid remains unchanged;
           2) if <b>nitro_prolongate</b> is false then full session token remains unchanged.</p>
        <h4>get_value(binary(),term(),term()) -> term().</h4>
        <p>Gets session variable from session storage.</p>
        <h4>set_value(binary(),term(),term()) -> term().</h4>
        <p>Sets session variable to session storage.</p>
        <h4>storage() -> atom().</h4>
        <p>Returns current sessions backend. <b>n2o_session</b> by default.</p>
        <h4>prolongate() -> boolean().</h4>
        <p>Returns <b>nitro_prolongate</b> n2o parameter. <b>false</b> by default.</p>
    </section>
    <section>
        <h3>BACKEND</h3>
        <h4>clear(binary()) -> ok.</h4>
        <p>Clears all session ovariables by session sid.</p>
        <h4>update(session()) -> ok.</h4>
        <p>Updates session.</p>
        <h4>delete(session_key()) -> ok.</h4>
        <p>Removes session by key.</p>
        <h4>lookup(session_key()) -> ok.</h4>
        <p>Lookups session by key.</p>
        <h4>invalidate_sessions() -> ok.</h4>
        <p>Removes all expired variables across all sessions.</p>
    </section>
    <section>
        <p>You may also want to read:
        <b><a href="n2o_nitro.htm">n2o_nitro</a></b>,
        <b><a href="n2o.htm">n2o</a></b>.
        </p>
    </section>
</main>
<footer>
    2005&mdash;2018 &copy; Synrc Research Center
</footer>
</body>
</html>
