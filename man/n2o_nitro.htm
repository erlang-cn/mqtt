<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>NITRO</title>
    <link rel="stylesheet" href="https://synrc.space/synrc.css" />
</head>

<body>

<nav>
    <a href='https://n2o.space'>ECO</a>
    <a href='https://o7.network'>O7</a>
    <a href='../index.html'>N2O</a>
</nav>

<header>
    <a href="../index.html"><img src="https://n2o.space/img/Synrc Neo.svg"></a>
    <h1>NITRO</h1>
</header>

<main>
    <section>


<h3>INTRO</h3>

<p>The <a href="https://github.com/synrc/mqtt/blob/master/src/protocols/n2o_nitro.erl">n2o_nitro</a> module provides
   <a href="http://nitrogenproject.com/demos">Nitrogen Web Framework</a>
   protocol specification and implementation.</p>

    </section>
    <section>
        <h3>INIT</h3>
        <p>Init message invokes event(init) function in page module.
           There are two binary representations of INIT message.
           The first one is BERT encoded #init record with binary
           token that usually issued by n2o_session, transported in #io record
           as data parameter and stored on client side in localStorage or Key Chain.
           Clients with invalid tokens are being registered and reissued.</p>
        <figure><code>
 -record(init, { token :: binary() }).
        </code></figure>
        <p>The second one is TEXT encoded version of message, &lt;&lt;"N2O,"&gt;&gt;
           that usually works for hosts with raw binary falicities as WebSockets.
           </p>
        <figure><code>
 <<"N2O,",Token/binary>>
        </code></figure>
        <p>For token issue protocol see <a href="n2o_session.htm">n2o_session</a> module.</p>
    </section>
    <section>
        <h3>PICKLE</h3>
        <p>Pickle message sends to server prerendered (by server) encripted message.
           These messages hold #ev record with callee information (encripted).
           Pickled messaged can prolongate expiration field in session token (renewed)
           by updating client token on each UI request (tracking user activity) when
           n2o application variable <b>nitro_prolongate</b> equals <b>true</b>.</p>
        <div>
        <figure><code>
 -record(pickle, { source  = [] :: [] | binary(),
                   pickled = [] :: [] | binary(),
                   args    = [] :: list({atom(),any()}) }).

 -record(ev,     { module  = [] :: [] | atom(),
                   msg     = [] :: any(),
                   trigger = [] :: [] | binary(),
                   name    = [] :: [] | binary() }).
        </code></figure>
        </div>
    </section>
    <section>
        <h3>DIRECT</h3>
        <p>Direct message sends data without any convertation or encription or session logic.</p>
        <div>
        <figure><code>
 -record(direct, { data = [] :: any() }).
        </code></figure>
        </div>
    </section>
    <section>
        <h3>FLUSH</h3>
        <p>Flush message only redirects data to the socket.</p>
        <div>
        <figure><code>
 -record(flush, { data = [] :: [] | list(#action{}) }).

        </code></figure>
        </div>
    </section>
    <section>

<p>You may also want to read:
<b>
<a href="n2o_heart.htm">n2o_heart</a></b>,
<a href="n2o_ftp.htm">n2o_ftp</a></b>.
</p>

    </section>
</main>

<footer>
    2005&mdash;2018 &copy; Synrc Research Center
</footer>

</body>
</html>
